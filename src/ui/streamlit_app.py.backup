"""
Interactive Web Application

This module is the frontend of the Clinical Insights Assistant, built using Streamlit. It
provides an intuitive web interface for users to upload data, trigger analyses, view results,
and interact with the AI agent.

Purpose:
‚Ä¢ Provide a user-friendly interface for the Clinical Insights Assistant.
‚Ä¢ Allow data upload and display of processed data.
‚Ä¢ Present analysis results and AI-generated insights visually.
‚Ä¢ Enable interaction with the AI agent for autonomous analysis.

Step-by-Step Implementation:
1. Set up Streamlit Page Configuration and Imports:
   Start with basic Streamlit configuration and import all necessary modules.

2. Define Helper Functions for UI Elements:
   These functions encapsulate common UI patterns.

3. Implement the Main Application Layout:
   Use Streamlit containers and columns to structure the application.
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No compliance issues detected")
                
        except Exception as e:
            st.error(f"Error in compliance analysis: {str(e)}")
    
    with tab2:
        st.markdown("#### üö® Safety & Adverse Events")
        try:
            # Detect adverse events
            ae_issues = detector.detect_adverse_events(data)
            
            if ae_issues:
                st.error(f"Found {len(ae_issues)} safety concerns")
                
                for i, issue in enumerate(ae_issues):
                    with st.expander(f"Safety Alert {i+1}: {issue.issue_type} - {issue.severity}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**Patient ID:** {issue.patient_id}")
                            st.write(f"**Severity:** {issue.severity}")
                        with col2:
                            st.write(f"**Confidence:** {issue.confidence_score:.1%}")
                            st.write(f"**Visit:** {issue.visit_number}")
                        st.write(f"**Description:** {issue.description}")
                        if issue.recommendations:
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No safety issues detected")
                
        except Exception as e:
            st.error(f"Error in safety analysis: {str(e)}")
    
    with tab3:
        st.markdown("#### üìâ Efficacy Assessment")
        try:
            # Detect efficacy issues
            efficacy_issues = detector.detect_efficacy_issues(data)
            
            if efficacy_issues:
                st.warning(f"Found {len(efficacy_issues)} efficacy concerns")
                
                for i, issue in enumerate(efficacy_issues):
                    with st.expander(f"Efficacy Issue {i+1}: {issue.issue_type} - {issue.severity}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**Patient ID:** {issue.patient_id}")
                            st.write(f"**Severity:** {issue.severity}")
                        with col2:
                            st.write(f"**Confidence:** {issue.confidence_score:.1%}")
                            st.write(f"**Visit:** {issue.visit_number}")
                        st.write(f"**Description:** {issue.description}")
                        if issue.recommendations:
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No efficacy issues detected")
                
        except Exception as e:
            st.error(f"Error in efficacy analysis: {str(e)}") structure the application.

This streamlit_app.py provides a complete, interactive user interface for the Clinical Insights
Assistant, bringing together all the backend functionalities into a cohesive and user-friendly
experience. It demonstrates how to use Streamlit for data visualization, user input, and
displaying complex analytical results.
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
import io
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional
import sys
import os

# Add the parent directory to the path for imports
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

try:
    from agent_core import ClinicalAgent
    from data_loader import ClinicalDataLoader
    from genai_interface import GenAIInterface
    from memory import MemoryManager
    from issue_detection import IssueDetector
    from cohort_analysis import CohortAnalyzer
    from scenario_simulation import ScenarioSimulator
except ImportError:
    # Fallback for different import paths
    import sys
    sys.path.append('../')
    from agent_core import ClinicalAgent
    from data_loader import ClinicalDataLoader
    from genai_interface import GenAIInterface
    from memory import MemoryManager
    from issue_detection import IssueDetector
    from cohort_analysis import CohortAnalyzer
    from scenario_simulation import ScenarioSimulator

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ============================================================================
# 1. STREAMLIT PAGE CONFIGURATION AND SETUP
# ============================================================================

def configure_page():
    """Configure Streamlit page settings and styling."""
    st.set_page_config(
        page_title="Clinical Insights Assistant",
        page_icon="üè•",
        layout="wide",
        initial_sidebar_state="expanded",
        menu_items={
            'Get Help': 'https://github.com/Nits02/clinical-insight-assistance',
            'Report a bug': 'https://github.com/Nits02/clinical-insight-assistance/issues',
            'About': "# Clinical Insights Assistant\nAI-powered clinical trial analysis platform"
        }
    )
    
    # Custom CSS for better styling
    st.markdown("""
    <style>
        .main-header {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            padding: 2rem;
            border-radius: 10px;
            margin-bottom: 2rem;
            color: white;
            text-align: center;
        }
        .metric-card {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #667eea;
            margin: 0.5rem 0;
        }
        .insight-card {
            background: #e3f2fd;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #2196f3;
            margin: 0.5rem 0;
        }
        .warning-card {
            background: #fff3e0;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #ff9800;
            margin: 0.5rem 0;
        }
        .success-card {
            background: #e8f5e8;
            padding: 1rem;
            border-radius: 8px;
            border-left: 4px solid #4caf50;
            margin: 0.5rem 0;
        }
        .stButton > button {
            background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 8px;
            padding: 0.5rem 1rem;
            font-weight: 600;
        }
        .sidebar .sidebar-content {
            background: #f8f9fa;
        }
    </style>
    """, unsafe_allow_html=True)

# ============================================================================
# 2. HELPER FUNCTIONS FOR UI ELEMENTS
# ============================================================================

def display_header():
    """Display the main application header."""
    st.markdown("""
    <div class="main-header">
        <h1>üè• Clinical Insights Assistant</h1>
        <p>AI-Powered Clinical Trial Analysis Platform</p>
        <p><em>Upload your clinical data, get intelligent insights, and make data-driven decisions</em></p>
    </div>
    """, unsafe_allow_html=True)

def display_sidebar():
    """Configure and display the sidebar with navigation and controls."""
    with st.sidebar:
        st.image("https://via.placeholder.com/300x100/667eea/white?text=Clinical+Insights", width=300)
        
        st.markdown("### üéõÔ∏è Navigation")
        page = st.selectbox(
            "Choose a page:",
            ["üìä Data Upload & Analysis", "ü§ñ AI Agent Dashboard", "üìà Analytics & Insights", "‚öôÔ∏è Settings"]
        )
        
        st.markdown("### üìã Quick Stats")
        if 'analysis_results' in st.session_state:
            results = st.session_state.analysis_results
            st.metric("Total Records", len(st.session_state.get('uploaded_data', [])))
            st.metric("Insights Generated", len(results.get('insights', [])))
            st.metric("Recommendations", len(results.get('recommendations', [])))
        else:
            st.info("Upload data to see statistics")
        
        st.markdown("### üîó Quick Actions")
        if st.button("üîÑ Refresh Data"):
            st.rerun()
        
        if st.button("üì• Download Results"):
            if 'analysis_results' in st.session_state:
                download_results()
            else:
                st.warning("No results to download")
        
        st.markdown("---")
        st.markdown("### ‚ÑπÔ∏è About")
        st.markdown("""
        **Clinical Insights Assistant** helps you:
        - üì§ Upload clinical trial data
        - üîç Detect issues and patterns
        - üìä Compare patient cohorts
        - ü§ñ Generate AI insights
        - üìã Get actionable recommendations
        """)
    
    return page

def display_file_uploader():
    """Display file upload interface."""
    st.markdown("### üì§ Data Upload")
    
    uploaded_file = st.file_uploader(
        "Choose a CSV file with clinical trial data",
        type=['csv'],
        help="Upload your clinical trial dataset. The file should contain patient data with columns like patient_id, cohort, visit_date, etc."
    )
    
    if uploaded_file is not None:
        try:
            # Initialize ClinicalDataLoader for advanced data processing
            from data_loader import ClinicalDataLoader
            loader = ClinicalDataLoader()
            
            # Read the uploaded file
            data = pd.read_csv(uploaded_file)
            st.session_state.uploaded_data = data
            
            # Use ClinicalDataLoader for data processing (validation is done internally in load_data)
            with st.spinner("Processing and validating data..."):
                try:
                    # ClinicalDataLoader doesn't have public validate_data_structure method
                    # Instead, we'll do basic validation and let the modules handle detailed validation
                    st.success(f"‚úÖ Successfully uploaded {len(data)} records!")
                    
                    # Basic data quality checks
                    missing_data_pct = (data.isnull().sum().sum() / (len(data) * len(data.columns))) * 100
                    
                    if missing_data_pct > 20:
                        st.warning(f"‚ö†Ô∏è High missing data: {missing_data_pct:.1f}% of values are missing")
                    elif missing_data_pct > 0:
                        st.info(f"‚ÑπÔ∏è Missing data: {missing_data_pct:.1f}% of values are missing")
                    else:
                        st.success("‚úÖ No missing data detected")
                        
                except Exception as validation_error:
                    st.warning(f"‚ö†Ô∏è Data processing note: {str(validation_error)}")
                    st.session_state.uploaded_data = data
            
            # Display data preview
            st.markdown("#### üëÄ Data Preview")
            st.dataframe(data.head(10), use_container_width=True)
            
            # Display comprehensive statistics
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Total Records", len(data))
            with col2:
                st.metric("Columns", len(data.columns))
            with col3:
                if 'patient_id' in data.columns:
                    st.metric("Unique Patients", data['patient_id'].nunique())
                else:
                    st.metric("Unique Patients", "N/A")
            with col4:
                if 'cohort' in data.columns:
                    st.metric("Cohorts", data['cohort'].nunique())
                else:
                    st.metric("Cohorts", "N/A")
            
            # Data quality indicators
            st.markdown("#### üìä Data Quality Summary")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                missing_pct = (data.isnull().sum().sum() / (len(data) * len(data.columns))) * 100
                st.metric("Missing Data", f"{missing_pct:.1f}%")
            
            with col2:
                if 'adverse_event_flag' in data.columns:
                    ae_rate = data['adverse_event_flag'].mean() * 100
                    st.metric("Adverse Event Rate", f"{ae_rate:.1f}%")
                else:
                    st.metric("Adverse Event Rate", "N/A")
            
            with col3:
                if 'compliance_pct' in data.columns:
                    avg_compliance = data['compliance_pct'].mean()
                    st.metric("Avg Compliance", f"{avg_compliance:.1f}%")
                else:
                    st.metric("Avg Compliance", "N/A")
            
            with col4:
                if 'outcome_score' in data.columns:
                    avg_outcome = data['outcome_score'].mean()
                    st.metric("Avg Outcome Score", f"{avg_outcome:.1f}")
                else:
                    st.metric("Avg Outcome Score", "N/A")
            
            return data
            
        except Exception as e:
            st.error(f"Error reading file: {str(e)}")
            return None
    
    return None

def display_analysis_controls():
    """Display analysis configuration and trigger controls."""
    st.markdown("### üéØ Analysis Configuration")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### Analysis Goals")
        default_goals = [
            "Compare treatment efficacy across cohorts",
            "Evaluate safety profile and adverse events",
            "Assess patient compliance patterns",
            "Identify high-risk patients"
        ]
        
        analysis_goals = st.multiselect(
            "Select analysis objectives:",
            default_goals + ["Custom analysis goal"],
            default=default_goals[:2]
        )
        
        if "Custom analysis goal" in analysis_goals:
            custom_goal = st.text_input("Enter custom analysis goal:")
            if custom_goal:
                analysis_goals = [g for g in analysis_goals if g != "Custom analysis goal"] + [custom_goal]
    
    with col2:
        st.markdown("#### Analysis Settings")
        confidence_threshold = st.slider("Confidence Threshold", 0.0, 1.0, 0.7, 0.1)
        max_insights = st.number_input("Maximum Insights", 1, 50, 10)
        include_recommendations = st.checkbox("Include Recommendations", True)
        detailed_analysis = st.checkbox("Detailed Analysis", False)
    
    # Analysis trigger button
    st.markdown("---")
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üöÄ Start AI Analysis", use_container_width=True):
            if 'uploaded_data' in st.session_state:
                run_analysis(
                    st.session_state.uploaded_data,
                    analysis_goals,
                    confidence_threshold,
                    max_insights,
                    include_recommendations,
                    detailed_analysis
                )
            else:
                st.error("Please upload data first!")
    
    return {
        'goals': analysis_goals,
        'confidence_threshold': confidence_threshold,
        'max_insights': max_insights,
        'include_recommendations': include_recommendations,
        'detailed_analysis': detailed_analysis
    }

def display_data_visualizations(data: pd.DataFrame):
    """Display interactive data visualizations."""
    st.markdown("### üìä Data Visualizations")
    
    if data is None or data.empty:
        st.warning("No data to visualize")
        return
    
    tab1, tab2, tab3, tab4 = st.tabs(["üìà Overview", "üîç Cohort Analysis", "üìÖ Time Series", "üéØ Custom"])
    
    with tab1:
        display_overview_charts(data)
    
    with tab2:
        display_cohort_analysis_charts(data)
    
    with tab3:
        display_time_series_charts(data)
    
    with tab4:
        display_custom_charts(data)

def display_overview_charts(data: pd.DataFrame):
    """Display overview charts."""
    col1, col2 = st.columns(2)
    
    with col1:
        if 'cohort' in data.columns:
            # Cohort distribution
            cohort_counts = data['cohort'].value_counts()
            fig = px.pie(
                values=cohort_counts.values,
                names=cohort_counts.index,
                title="Patient Distribution by Cohort"
            )
            st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        if 'outcome_score' in data.columns:
            # Outcome distribution
            fig = px.histogram(
                data,
                x='outcome_score',
                title="Outcome Score Distribution",
                nbins=20
            )
            st.plotly_chart(fig, use_container_width=True)
    
    # Additional charts
    if 'adverse_event_flag' in data.columns:
        ae_summary = data.groupby('cohort')['adverse_event_flag'].agg(['sum', 'count']).reset_index()
        ae_summary['rate'] = ae_summary['sum'] / ae_summary['count'] * 100
        
        fig = px.bar(
            ae_summary,
            x='cohort',
            y='rate',
            title="Adverse Event Rate by Cohort (%)",
            color='cohort'
        )
        st.plotly_chart(fig, use_container_width=True)

def display_cohort_analysis_charts(data: pd.DataFrame):
    """Display cohort comparison charts."""
    if 'cohort' not in data.columns:
        st.warning("No cohort information found in data")
        return
    
    # Cohort comparison metrics
    numeric_columns = data.select_dtypes(include=[np.number]).columns
    
    if len(numeric_columns) > 0:
        selected_metric = st.selectbox("Select metric for cohort comparison:", numeric_columns)
        
        # Box plot comparison
        fig = px.box(
            data,
            x='cohort',
            y=selected_metric,
            title=f"{selected_metric.title()} by Cohort"
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Statistical summary
        cohort_stats = data.groupby('cohort')[selected_metric].describe()
        st.markdown("#### Statistical Summary")
        st.dataframe(cohort_stats, use_container_width=True)

def display_time_series_charts(data: pd.DataFrame):
    """Display time series visualizations."""
    date_columns = [col for col in data.columns if 'date' in col.lower() or 'time' in col.lower()]
    
    if not date_columns:
        st.warning("No date/time columns found for time series analysis")
        return
    
    date_col = st.selectbox("Select date column:", date_columns)
    
    try:
        data[date_col] = pd.to_datetime(data[date_col])
        
        # Time series of key metrics
        if 'outcome_score' in data.columns:
            fig = px.line(
                data.groupby([date_col, 'cohort'])['outcome_score'].mean().reset_index(),
                x=date_col,
                y='outcome_score',
                color='cohort' if 'cohort' in data.columns else None,
                title="Outcome Score Trends Over Time"
            )
            st.plotly_chart(fig, use_container_width=True)
            
    except Exception as e:
        st.error(f"Error creating time series: {str(e)}")

def display_custom_charts(data: pd.DataFrame):
    """Allow users to create custom visualizations."""
    st.markdown("#### Create Custom Visualization")
    
    chart_type = st.selectbox("Chart Type:", ["Scatter Plot", "Line Chart", "Bar Chart", "Histogram"])
    
    columns = list(data.columns)
    
    col1, col2 = st.columns(2)
    with col1:
        x_axis = st.selectbox("X-axis:", columns)
    with col2:
        y_axis = st.selectbox("Y-axis:", columns)
    
    color_by = st.selectbox("Color by (optional):", ["None"] + columns)
    
    if st.button("Generate Chart"):
        try:
            if chart_type == "Scatter Plot":
                fig = px.scatter(data, x=x_axis, y=y_axis, color=color_by if color_by != "None" else None)
            elif chart_type == "Line Chart":
                fig = px.line(data, x=x_axis, y=y_axis, color=color_by if color_by != "None" else None)
            elif chart_type == "Bar Chart":
                fig = px.bar(data, x=x_axis, y=y_axis, color=color_by if color_by != "None" else None)
            elif chart_type == "Histogram":
                fig = px.histogram(data, x=x_axis, color=color_by if color_by != "None" else None)
            
            st.plotly_chart(fig, use_container_width=True)
        except Exception as e:
            st.error(f"Error creating chart: {str(e)}")

def display_analysis_results():
    """Display AI analysis results and insights."""
    if 'analysis_results' not in st.session_state:
        st.info("Run an analysis to see results here")
        return
    
    results = st.session_state.analysis_results
    
    st.markdown("### ü§ñ AI Analysis Results")
    
    # Results summary
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h4>üìä Tasks Completed</h4>
            <h2>{}</h2>
        </div>
        """.format(len(results.get('analysis_results', []))), unsafe_allow_html=True)
    
    with col2:
        st.markdown("""
        <div class="metric-card">
            <h4>üí° Insights Generated</h4>
            <h2>{}</h2>
        </div>
        """.format(len(results.get('insights', []))), unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h4>üìã Recommendations</h4>
            <h2>{}</h2>
        </div>
        """.format(len(results.get('recommendations', []))), unsafe_allow_html=True)
    
    with col4:
        avg_confidence = np.mean([insight.confidence_score for insight in results.get('insights', [])]) if results.get('insights') else 0
        st.markdown("""
        <div class="metric-card">
            <h4>üéØ Avg Confidence</h4>
            <h2>{:.1%}</h2>
        </div>
        """.format(avg_confidence), unsafe_allow_html=True)
    
    # Display insights
    if results.get('insights'):
        st.markdown("#### üí° Key Insights")
        for i, insight in enumerate(results['insights']):
            with st.expander(f"Insight {i+1}: {insight.title}"):
                col1, col2 = st.columns([3, 1])
                with col1:
                    st.write(insight.description)
                    if insight.recommendations:
                        st.markdown("**Recommendations:**")
                        for rec in insight.recommendations:
                            st.write(f"‚Ä¢ {rec}")
                
                with col2:
                    st.metric("Confidence", f"{insight.confidence_score:.1%}")
                    st.metric("Significance", insight.clinical_significance.title())
                    
                    # Visual indicator for confidence
                    if insight.confidence_score >= 0.8:
                        st.success("High Confidence")
                    elif insight.confidence_score >= 0.6:
                        st.warning("Medium Confidence")
                    else:
                        st.error("Low Confidence")
    
    # Display recommendations
    if results.get('recommendations'):
        st.markdown("#### üìã Actionable Recommendations")
        for i, rec in enumerate(results['recommendations']):
            st.markdown(f"""
            <div class="insight-card">
                <strong>Recommendation {i+1}:</strong> {rec}
            </div>
            """, unsafe_allow_html=True)

def display_agent_dashboard():
    """Display AI agent status and controls."""
    st.markdown("### ü§ñ AI Agent Dashboard")
    
    # Initialize agent if not exists
    if 'agent' not in st.session_state:
        with st.spinner("Initializing AI Agent..."):
            st.session_state.agent = ClinicalAgent()
    
    agent = st.session_state.agent
    status = agent.get_agent_status()
    
    # Agent status
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Active Tasks", status['active_tasks'])
    with col2:
        st.metric("Completed Tasks", status['completed_tasks'])
    with col3:
        st.metric("Total Insights", status['total_insights'])
    with col4:
        memory_usage = status['memory_usage']['disk_usage_mb'] if isinstance(status['memory_usage'], dict) else 0
        st.metric("Memory Usage (MB)", f"{memory_usage:.2f}")
    
    # Agent controls
    st.markdown("#### Agent Controls")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ Refresh Status"):
            st.rerun()
    
    with col2:
        if st.button("üßπ Clear Memory"):
            # Clear agent memory
            st.success("Agent memory cleared!")
    
    with col3:
        if st.button("üìä View Agent Logs"):
            display_agent_logs()

def display_agent_logs():
    """Display agent activity logs."""
    st.markdown("#### üìã Agent Activity Logs")
    
    # Mock logs for demonstration
    logs = [
        {"timestamp": datetime.now() - timedelta(minutes=5), "level": "INFO", "message": "Analysis session started"},
        {"timestamp": datetime.now() - timedelta(minutes=3), "level": "INFO", "message": "Data exploration completed"},
        {"timestamp": datetime.now() - timedelta(minutes=2), "level": "INFO", "message": "Cohort analysis completed"},
        {"timestamp": datetime.now() - timedelta(minutes=1), "level": "INFO", "message": "Insights generated successfully"},
    ]
    
    for log in logs:
        level_color = {"INFO": "üîµ", "WARNING": "üü°", "ERROR": "üî¥"}.get(log["level"], "‚ö™")
        st.write(f"{level_color} {log['timestamp'].strftime('%H:%M:%S')} - {log['message']}")

# ============================================================================
# 3. CORE ANALYSIS FUNCTIONS
# ============================================================================

def run_analysis(data: pd.DataFrame, goals: List[str], confidence_threshold: float, 
                max_insights: int, include_recommendations: bool, detailed_analysis: bool):
    """Run comprehensive AI analysis on the uploaded data."""
    
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    try:
        # Initialize components
        status_text.text("Initializing AI components...")
        progress_bar.progress(10)
        
        if 'agent' not in st.session_state:
            st.session_state.agent = ClinicalAgent()
        
        agent = st.session_state.agent
        
        # Run analysis
        status_text.text("Running AI analysis...")
        progress_bar.progress(30)
        
        # This needs to be run in an async context
        async def run_async_analysis():
            return await agent.analyze_trial_data(data, goals)
        
        # Create event loop for async execution
        try:
            loop = asyncio.get_event_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        
        results = loop.run_until_complete(run_async_analysis())
        
        progress_bar.progress(80)
        status_text.text("Processing results...")
        
        # Store results in session state
        st.session_state.analysis_results = results
        
        progress_bar.progress(100)
        status_text.text("Analysis complete!")
        
        # Show success message
        st.success(f"‚úÖ Analysis completed! Generated {len(results.get('insights', []))} insights and {len(results.get('recommendations', []))} recommendations.")
        
        # Auto-refresh to show results
        st.rerun()
        
    except Exception as e:
        st.error(f"Analysis failed: {str(e)}")
        logger.error(f"Analysis error: {e}", exc_info=True)
    
    finally:
        progress_bar.empty()
        status_text.empty()

def download_results():
    """Generate and provide download link for analysis results."""
    if 'analysis_results' not in st.session_state:
        st.warning("No results to download")
        return
    
    results = st.session_state.analysis_results
    
    # Convert results to downloadable format
    download_data = {
        'session_id': results.get('session_id'),
        'analysis_timestamp': datetime.now().isoformat(),
        'insights': [
            {
                'title': insight.title,
                'description': insight.description,
                'confidence_score': insight.confidence_score,
                'clinical_significance': insight.clinical_significance,
                'recommendations': insight.recommendations
            }
            for insight in results.get('insights', [])
        ],
        'recommendations': results.get('recommendations', []),
        'metrics': results.get('metrics', {})
    }
    
    # Convert to JSON
    json_data = json.dumps(download_data, indent=2)
    
    st.download_button(
        label="üì• Download Analysis Results (JSON)",
        data=json_data,
        file_name=f"clinical_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
        mime="application/json"
    )

# ============================================================================
# 4. MAIN APPLICATION LAYOUT AND ROUTING
# ============================================================================

def main():
    """Main application function."""
    
    # Configure page
    configure_page()
    
    # Display header
    display_header()
    
    # Get current page from sidebar
    current_page = display_sidebar()
    
    # Route to appropriate page
    if current_page == "üìä Data Upload & Analysis":
        data_upload_page()
    elif current_page == "ü§ñ AI Agent Dashboard":
        agent_dashboard_page()
    elif current_page == "üìà Analytics & Insights":
        analytics_page()
    elif current_page == "‚öôÔ∏è Settings":
        settings_page()

def data_upload_page():
    """Data upload and analysis page."""
    st.markdown("## üìä Data Upload & Analysis")
    
    # File upload section
    uploaded_data = display_file_uploader()
    
    if uploaded_data is not None:
        # Analysis controls
        analysis_config = display_analysis_controls()
        
        st.markdown("---")
        
        # Data visualizations
        display_data_visualizations(uploaded_data)
        
        st.markdown("---")
        
        # Analysis results
        display_analysis_results()

def agent_dashboard_page():
    """AI agent dashboard page."""
    st.markdown("## ü§ñ AI Agent Dashboard")
    
    display_agent_dashboard()
    
    # Agent performance metrics
    if 'analysis_results' in st.session_state:
        st.markdown("### üìä Agent Performance")
        results = st.session_state.analysis_results
        metrics = results.get('metrics', {})
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Tasks Completed", metrics.get('tasks_completed', 0))
        with col2:
            st.metric("Insights Generated", metrics.get('insights_generated', 0))
        with col3:
            st.metric("Avg Confidence", f"{metrics.get('average_confidence_score', 0):.1%}")

def analytics_page():
    """Analytics and insights page."""
    st.markdown("## üìà Analytics & Insights")
    
    if 'uploaded_data' not in st.session_state:
        st.warning("Please upload data first in the Data Upload & Analysis page")
        return
    
    data = st.session_state.uploaded_data
    
    # Advanced analytics
    tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä Statistical Analysis", "üîç Pattern Detection", "üéØ What-If Analysis", "ü§ñ AI Text Analysis", "üìã Detailed Reports"])
    
    with tab1:
        display_statistical_analysis(data)
    
    with tab2:
        display_pattern_detection(data)
    
    with tab3:
        display_scenario_simulation(data)
    
    with tab4:
        display_genai_text_analysis()
    
    with tab5:
        display_detailed_reports()

def display_statistical_analysis(data: pd.DataFrame):
    """Display advanced statistical analysis using CohortAnalyzer."""
    st.markdown("### üìä Statistical Analysis")
    
    # Initialize CohortAnalyzer for statistical analysis
    analyzer = CohortAnalyzer()
    
    # Cohort comparison if cohort column exists
    if 'cohort' in data.columns:
        st.markdown("#### üìà Cohort Comparison Analysis")
        
        cohorts = data['cohort'].unique()
        if len(cohorts) >= 2:
            # Select cohorts to compare
            selected_cohorts = st.multiselect(
                "Select cohorts to compare:", 
                cohorts, 
                default=cohorts[:2] if len(cohorts) >= 2 else cohorts
            )
            
            if len(selected_cohorts) >= 2:
                try:
                    # Perform cohort comparison
                    cohort_a_data = data[data['cohort'] == selected_cohorts[0]]
                    cohort_b_data = data[data['cohort'] == selected_cohorts[1]]
                    
                    comparison = analyzer.compare_cohorts(cohort_a_data, cohort_b_data)
                    
                    # Display comparison results
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.metric("Statistical Significance", 
                                f"p-value: {comparison.statistical_significance:.4f}")
                    with col2:
                        st.metric("Effect Size", f"{comparison.effect_size:.3f}")
                    with col3:
                        st.metric("Confidence Level", f"{comparison.confidence_level:.1%}")
                    
                    # Display detailed metrics
                    if hasattr(comparison, 'metrics'):
                        st.markdown("##### Detailed Metrics")
                        metrics_df = pd.DataFrame([comparison.metrics])
                        st.dataframe(metrics_df, use_container_width=True)
                    
                except Exception as e:
                    st.error(f"Error in cohort analysis: {str(e)}")
    
    # Correlation matrix
    numeric_cols = data.select_dtypes(include=[np.number]).columns
    
    if len(numeric_cols) > 0:
        st.markdown("#### üîó Correlation Matrix")
        corr_matrix = data[numeric_cols].corr()
        fig = px.imshow(corr_matrix, text_auto=True, aspect="auto")
        st.plotly_chart(fig, use_container_width=True)
        
        # Statistical summary
        st.markdown("#### Statistical Summary")
        st.dataframe(data[numeric_cols].describe(), use_container_width=True)

def display_pattern_detection(data: pd.DataFrame):
    """Display pattern detection results using IssueDetector."""
    st.markdown("### üîç Pattern Detection & Issue Analysis")
    
    # Initialize IssueDetector
    detector = IssueDetector()
    
    tab1, tab2, tab3 = st.tabs(["‚ö†Ô∏è Compliance Issues", "üö® Safety Alerts", "üìâ Efficacy Concerns"])
    
    with tab1:
        st.markdown("#### üíä Compliance Analysis")
        try:
            # Detect compliance issues
            compliance_issues = detector.detect_compliance_issues(data)
            
            if compliance_issues:
                st.warning(f"Found {len(compliance_issues)} compliance issues")
                
                for i, issue in enumerate(compliance_issues):
                    with st.expander(f"Issue {i+1}: {issue.issue_type} - {issue.severity}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**Patient ID:** {issue.patient_id}")
                            st.write(f"**Severity:** {issue.severity}")
                        with col2:
                            st.write(f"**Confidence:** {issue.confidence_score:.1%}")
                            st.write(f"**Visit:** {issue.visit_number}")
                        st.write(f"**Description:** {issue.description}")
                        if issue.recommendations:
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No compliance issues detected")
                
        except Exception as e:
            st.error(f"Error in compliance analysis: {str(e)}")
    
    with tab2:
        st.markdown("#### üö® Safety & Adverse Events")
        try:
            # Detect adverse events
            ae_issues = detector.detect_adverse_events(data)
            
            if ae_issues:
                st.error(f"Found {len(ae_issues)} safety concerns")
                
                for i, issue in enumerate(ae_issues):
                    with st.expander(f"Safety Alert {i+1}: {issue.issue_type} - {issue.severity}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**Patient ID:** {issue.patient_id}")
                            st.write(f"**Severity:** {issue.severity}")
                        with col2:
                            st.write(f"**Confidence:** {issue.confidence_score:.1%}")
                            st.write(f"**Visit:** {issue.visit_number}")
                        st.write(f"**Description:** {issue.description}")
                        if issue.recommendations:
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No safety issues detected")
                
        except Exception as e:
            st.error(f"Error in safety analysis: {str(e)}")
    
    with tab3:
        st.markdown("#### üìâ Efficacy Assessment")
        try:
            # Detect efficacy issues
            efficacy_issues = detector.detect_efficacy_issues(data)
            
            if efficacy_issues:
                st.warning(f"Found {len(efficacy_issues)} efficacy concerns")
                
                for i, issue in enumerate(efficacy_issues):
                    with st.expander(f"Efficacy Issue {i+1}: {issue.issue_type} - {issue.severity}"):
                        col1, col2 = st.columns(2)
                        with col1:
                            st.write(f"**Patient ID:** {issue.patient_id}")
                            st.write(f"**Severity:** {issue.severity}")
                        with col2:
                            st.write(f"**Confidence:** {issue.confidence_score:.1%}")
                            st.write(f"**Visit:** {issue.visit_number}")
                        st.write(f"**Description:** {issue.description}")
                        if issue.recommendations:
                            st.write(f"**Recommendations:** {', '.join(issue.recommendations)}")
            else:
                st.success("No efficacy issues detected")
                
        except Exception as e:
            st.error(f"Error in efficacy analysis: {str(e)}")

def display_scenario_simulation(data: pd.DataFrame):
    """Display scenario simulation and what-if analysis using ScenarioSimulator."""
    st.markdown("### üéØ What-If Analysis & Scenario Simulation")
    
    # Initialize ScenarioSimulator
    simulator = ScenarioSimulator()
    
    st.markdown("#### üìã Configure Scenario Parameters")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("##### üìä Cohort Parameters")
        if 'cohort' in data.columns:
            selected_cohort = st.selectbox("Select Cohort for Simulation:", data['cohort'].unique())
        else:
            st.warning("No cohort column found in data")
            return
        
        # Dosage modification
        if 'dosage_mg' in data.columns:
            current_dosage = data[data['cohort'] == selected_cohort]['dosage_mg'].iloc[0]
            new_dosage = st.slider("Modify Dosage (mg)", 
                                 min_value=0, 
                                 max_value=int(current_dosage * 2), 
                                 value=int(current_dosage))
        else:
            new_dosage = st.slider("Dosage (mg)", 0, 100, 50)
    
    with col2:
        st.markdown("##### üìà Outcome Parameters")
        # Compliance modification
        if 'compliance_pct' in data.columns:
            avg_compliance = data[data['cohort'] == selected_cohort]['compliance_pct'].mean()
            target_compliance = st.slider("Target Compliance (%)", 
                                        min_value=0.0, 
                                        max_value=100.0, 
                                        value=float(avg_compliance))
        else:
            target_compliance = st.slider("Target Compliance (%)", 0.0, 100.0, 85.0)
        
        # Sample size modification
        sample_size = st.number_input("Sample Size", 
                                    min_value=10, 
                                    max_value=500, 
                                    value=100)
    
    if st.button("üöÄ Run Scenario Simulation"):
        try:
            with st.spinner("Running scenario simulation..."):
                # Create scenario parameters
                scenario_params = {
                    'cohort': selected_cohort,
                    'dosage_mg': new_dosage,
                    'compliance_pct': target_compliance,
                    'sample_size': sample_size
                }
                
                # Run simulation
                simulation_results = simulator.simulate_outcome_scenarios(data, scenario_params)
                
                # Display results
                st.markdown("#### üìä Simulation Results")
                
                if simulation_results:
                    col1, col2, col3 = st.columns(3)
                    
                    with col1:
                        if hasattr(simulation_results, 'predicted_outcome'):
                            st.metric("Predicted Outcome Score", 
                                    f"{simulation_results.predicted_outcome:.1f}")
                        else:
                            st.metric("Predicted Outcome Score", "N/A")
                    
                    with col2:
                        if hasattr(simulation_results, 'confidence_interval'):
                            st.metric("Confidence Interval", 
                                    f"¬±{simulation_results.confidence_interval:.1f}")
                        else:
                            st.metric("Confidence Interval", "N/A")
                    
                    with col3:
                        if hasattr(simulation_results, 'success_probability'):
                            st.metric("Success Probability", 
                                    f"{simulation_results.success_probability:.1%}")
                        else:
                            st.metric("Success Probability", "N/A")
                    
                    # Show scenario comparison
                    st.markdown("#### üìà Scenario Comparison")
                    
                    # Create comparison chart
                    comparison_data = {
                        'Scenario': ['Current', 'Simulated'],
                        'Dosage (mg)': [current_dosage if 'dosage_mg' in data.columns else 50, new_dosage],
                        'Compliance (%)': [avg_compliance if 'compliance_pct' in data.columns else 85, target_compliance],
                        'Predicted Outcome': [data[data['cohort'] == selected_cohort]['outcome_score'].mean() if 'outcome_score' in data.columns else 70, 
                                           simulation_results.predicted_outcome if hasattr(simulation_results, 'predicted_outcome') else 75]
                    }
                    
                    comparison_df = pd.DataFrame(comparison_data)
                    st.dataframe(comparison_df, use_container_width=True)
                    
                    # Visualization
                    fig = px.bar(comparison_df, x='Scenario', y='Predicted Outcome', 
                               title="Outcome Comparison: Current vs Simulated")
                    st.plotly_chart(fig, use_container_width=True)
                    
                else:
                    st.warning("Simulation completed but no results available")
                    
        except Exception as e:
            st.error(f"Error in scenario simulation: {str(e)}")

def display_genai_text_analysis():
    """Display AI-powered text analysis using GenAI Interface."""
    st.markdown("### ü§ñ AI Text Analysis & Natural Language Processing")
    
    try:
        # Initialize GenAI Interface
        genai = GenAIInterface()
        
        st.markdown("#### üìù Text Analysis Options")
        
        analysis_type = st.selectbox(
            "Select analysis type:",
            ["Clinical Report Analysis", "Adverse Event Description Analysis", "Medical Text Summarization", "Custom Query"]
        )
        
        if analysis_type == "Clinical Report Analysis":
            st.markdown("##### üìã Analyze Clinical Reports")
            
            # Text input for clinical report
            report_text = st.text_area(
                "Enter clinical report text:",
                placeholder="Enter clinical report, study notes, or medical documentation...",
                height=200
            )
            
            if report_text and st.button("Analyze Report"):
                with st.spinner("Analyzing clinical report..."):
                    try:
                        # Use GenAI for clinical report analysis
                        prompt = f"Analyze this clinical report and extract key insights, potential issues, and recommendations:\n\n{report_text}"
                        analysis_result = genai.generate_insights(prompt)
                        
                        st.markdown("##### üîç Analysis Results")
                        st.write(analysis_result)
                        
                    except Exception as e:
                        st.error(f"Error analyzing report: {str(e)}")
        
        elif analysis_type == "Adverse Event Description Analysis":
            st.markdown("##### ‚ö†Ô∏è Adverse Event Analysis")
            
            ae_text = st.text_area(
                "Enter adverse event description:",
                placeholder="Describe the adverse event, symptoms, timeline, etc...",
                height=150
            )
            
            if ae_text and st.button("Analyze Adverse Event"):
                with st.spinner("Analyzing adverse event..."):
                    try:
                        prompt = f"Analyze this adverse event description for severity, causality, and required actions:\n\n{ae_text}"
                        ae_analysis = genai.generate_insights(prompt)
                        
                        st.markdown("##### ‚ö†Ô∏è Adverse Event Analysis")
                        st.write(ae_analysis)
                        
                    except Exception as e:
                        st.error(f"Error analyzing adverse event: {str(e)}")
        
        elif analysis_type == "Medical Text Summarization":
            st.markdown("##### üìö Medical Text Summarization")
            
            medical_text = st.text_area(
                "Enter medical text to summarize:",
                placeholder="Enter medical literature, study protocols, or lengthy medical documents...",
                height=200
            )
            
            if medical_text and st.button("Generate Summary"):
                with st.spinner("Generating summary..."):
                    try:
                        prompt = f"Summarize this medical text, highlighting key points, findings, and clinical relevance:\n\n{medical_text}"
                        summary = genai.generate_insights(prompt)
                        
                        st.markdown("##### üìÑ Summary")
                        st.write(summary)
                        
                    except Exception as e:
                        st.error(f"Error generating summary: {str(e)}")
        
        elif analysis_type == "Custom Query":
            st.markdown("##### üí¨ Custom AI Query")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                custom_query = st.text_area(
                    "Enter your custom query:",
                    placeholder="Ask questions about clinical data, request analysis, or get recommendations...",
                    height=150
                )
            
            with col2:
                st.markdown("**Example queries:**")
                st.markdown("- What are the key risk factors in this study?")
                st.markdown("- Summarize the efficacy outcomes")
                st.markdown("- What safety concerns should we monitor?")
                st.markdown("- Generate recommendations for protocol amendments")
            
            if custom_query and st.button("Get AI Response"):
                with st.spinner("Processing query..."):
                    try:
                        response = genai.generate_insights(custom_query)
                        
                        st.markdown("##### ü§ñ AI Response")
                        st.write(response)
                        
                    except Exception as e:
                        st.error(f"Error processing query: {str(e)}")
        
        # Additional GenAI features
        st.markdown("#### üß† Advanced AI Features")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üìä Generate Data Insights"):
                if 'uploaded_data' in st.session_state:
                    with st.spinner("Generating AI insights from data..."):
                        try:
                            data = st.session_state.uploaded_data
                            data_summary = f"Data shape: {data.shape}, Columns: {list(data.columns)}, Sample data: {data.head().to_string()}"
                            prompt = f"Analyze this clinical dataset and provide insights:\n\n{data_summary}"
                            
                            insights = genai.generate_insights(prompt)
                            st.write(insights)
                            
                        except Exception as e:
                            st.error(f"Error generating insights: {str(e)}")
                else:
                    st.warning("Please upload data first")
        
        with col2:
            if st.button("üìù Generate Analysis Report"):
                if 'analysis_results' in st.session_state:
                    with st.spinner("Generating AI-powered report..."):
                        try:
                            results = st.session_state.analysis_results
                            results_summary = str(results)[:1000]  # Limit length
                            prompt = f"Create a comprehensive clinical analysis report based on these results:\n\n{results_summary}"
                            
                            report = genai.generate_insights(prompt)
                            st.write(report)
                            
                        except Exception as e:
                            st.error(f"Error generating report: {str(e)}")
                else:
                    st.warning("Please run analysis first")
                    
    except Exception as e:
        st.error(f"GenAI Interface initialization error: {str(e)}")
        st.info("AI text analysis features require proper GenAI configuration")

def display_detailed_reports():
    """Display detailed analysis reports."""
    st.markdown("### üìã Detailed Reports")
    
    if 'analysis_results' not in st.session_state:
        st.info("Run an analysis to generate detailed reports")
        return
    
    results = st.session_state.analysis_results
    
    # Generate comprehensive report
    report_sections = [
        "Executive Summary",
        "Data Quality Assessment", 
        "Cohort Analysis Results",
        "Safety Analysis",
        "Efficacy Analysis",
        "Recommendations"
    ]
    
    selected_sections = st.multiselect("Select report sections:", report_sections, default=report_sections)
    
    if st.button("Generate Report"):
        for section in selected_sections:
            st.markdown(f"#### {section}")
            st.write(f"Detailed analysis for {section} would appear here...")
            st.markdown("---")

def settings_page():
    """Application settings page."""
    st.markdown("## ‚öôÔ∏è Settings")
    
    tab1, tab2, tab3 = st.tabs(["üéõÔ∏è Analysis Settings", "üîß System Settings", "‚ÑπÔ∏è About"])
    
    with tab1:
        st.markdown("### Analysis Configuration")
        
        confidence_default = st.slider("Default Confidence Threshold", 0.0, 1.0, 0.7)
        max_insights_default = st.number_input("Default Max Insights", 1, 100, 10)
        auto_analysis = st.checkbox("Enable Auto-Analysis", False)
        
        if st.button("Save Analysis Settings"):
            st.success("Settings saved!")
    
    with tab2:
        st.markdown("### System Configuration")
        
        st.markdown("#### AI Provider Settings")
        provider = st.selectbox("AI Provider", ["Azure OpenAI", "OpenAI"])
        model = st.selectbox("Model", ["gpt-4o-mini", "gpt-4", "gpt-3.5-turbo"])
        
        st.markdown("#### Memory Settings")
        memory_limit = st.slider("Memory Limit (MB)", 100, 1000, 500)
        cache_enabled = st.checkbox("Enable Caching", True)
        
        if st.button("Save System Settings"):
            st.success("System settings saved!")
    
    with tab3:
        st.markdown("### About Clinical Insights Assistant")
        
        st.markdown("""
        **Version:** 1.0.0  
        **Built with:** Streamlit, OpenAI, Plotly  
        **Author:** Clinical AI Team  
        
        This application provides AI-powered analysis of clinical trial data with:
        - Automated data quality assessment
        - Intelligent cohort comparison
        - Safety and efficacy analysis
        - AI-generated insights and recommendations
        
        For support and documentation, visit our [GitHub repository](https://github.com/Nits02/clinical-insight-assistance).
        """)

# ============================================================================
# 5. APPLICATION ENTRY POINT
# ============================================================================

if __name__ == "__main__":
    main()